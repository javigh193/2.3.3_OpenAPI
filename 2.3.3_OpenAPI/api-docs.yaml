openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /articles:
    get:
      tags:
      - article-entity-controller
      description: get-article
      operationId: getCollectionResource-article-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelArticle'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelArticle'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - article-entity-controller
      description: create-article
      operationId: postCollectionResource-article-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelArticle'
  /articles/{id}:
    get:
      tags:
      - article-entity-controller
      description: get-article
      operationId: getItemResource-article-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelArticle'
        "404":
          description: Not Found
    put:
      tags:
      - article-entity-controller
      description: update-article
      operationId: putItemResource-article-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelArticle'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelArticle'
        "204":
          description: No Content
    delete:
      tags:
      - article-entity-controller
      description: delete-article
      operationId: deleteItemResource-article-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - article-entity-controller
      description: patch-article
      operationId: patchItemResource-article-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelArticle'
        "204":
          description: No Content
  /articles/{id}/tags:
    get:
      tags:
      - article-property-reference-controller
      description: get-tag-by-article-Id
      operationId: followPropertyReference-article-get_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelTag'
            text/uri-list:
              schema:
                type: string
        "404":
          description: Not Found
    put:
      tags:
      - article-property-reference-controller
      description: update-tag-by-article-Id
      operationId: createPropertyReference-article-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelTag'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelTag'
        "204":
          description: No Content
    delete:
      tags:
      - article-property-reference-controller
      description: delete-tag-by-article-Id
      operationId: deletePropertyReference-article-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - article-property-reference-controller
      description: patch-tag-by-article-Id
      operationId: createPropertyReference-article-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelTag'
        "204":
          description: No Content
  /articles/{id}/tags/{propertyId}:
    get:
      tags:
      - article-property-reference-controller
      description: get-tag-by-article-Id
      operationId: followPropertyReference-article-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelTag'
        "404":
          description: Not Found
    delete:
      tags:
      - article-property-reference-controller
      description: delete-tag-by-article-Id
      operationId: deletePropertyReferenceId-article-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
  /blogs:
    get:
      tags:
      - blog-entity-controller
      description: get-blog
      operationId: getCollectionResource-blog-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelBlog'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelBlog'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - blog-entity-controller
      description: create-blog
      operationId: postCollectionResource-blog-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelBlog'
  /blogs/{id}:
    get:
      tags:
      - blog-entity-controller
      description: get-blog
      operationId: getItemResource-blog-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelBlog'
        "404":
          description: Not Found
    put:
      tags:
      - blog-entity-controller
      description: update-blog
      operationId: putItemResource-blog-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelBlog'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelBlog'
        "204":
          description: No Content
    delete:
      tags:
      - blog-entity-controller
      description: delete-blog
      operationId: deleteItemResource-blog-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - blog-entity-controller
      description: patch-blog
      operationId: patchItemResource-blog-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelBlog'
        "204":
          description: No Content
  /blogs/{id}/articles:
    get:
      tags:
      - blog-property-reference-controller
      description: get-article-by-blog-Id
      operationId: followPropertyReference-blog-get_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelArticle'
            text/uri-list:
              schema:
                type: string
        "404":
          description: Not Found
    put:
      tags:
      - blog-property-reference-controller
      description: update-article-by-blog-Id
      operationId: createPropertyReference-blog-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelArticle'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelArticle'
        "204":
          description: No Content
    delete:
      tags:
      - blog-property-reference-controller
      description: delete-article-by-blog-Id
      operationId: deletePropertyReference-blog-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - blog-property-reference-controller
      description: patch-article-by-blog-Id
      operationId: createPropertyReference-blog-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelArticle'
        "204":
          description: No Content
  /blogs/{id}/articles/{propertyId}:
    get:
      tags:
      - blog-property-reference-controller
      description: get-article-by-blog-Id
      operationId: followPropertyReference-blog-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelArticle'
        "404":
          description: Not Found
    delete:
      tags:
      - blog-property-reference-controller
      description: delete-article-by-blog-Id
      operationId: deletePropertyReferenceId-blog-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
  /blogs/{id}/users:
    get:
      tags:
      - blog-property-reference-controller
      description: get-user-by-blog-Id
      operationId: followPropertyReference-blog-get_2_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
            text/uri-list:
              schema:
                type: string
        "404":
          description: Not Found
    put:
      tags:
      - blog-property-reference-controller
      description: update-user-by-blog-Id
      operationId: createPropertyReference-blog-put_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
        "204":
          description: No Content
    delete:
      tags:
      - blog-property-reference-controller
      description: delete-user-by-blog-Id
      operationId: deletePropertyReference-blog-delete_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - blog-property-reference-controller
      description: patch-user-by-blog-Id
      operationId: createPropertyReference-blog-patch_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
        "204":
          description: No Content
  /blogs/{id}/users/{propertyId}:
    get:
      tags:
      - blog-property-reference-controller
      description: get-user-by-blog-Id
      operationId: followPropertyReference-blog-get_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
        "404":
          description: Not Found
    delete:
      tags:
      - blog-property-reference-controller
      description: delete-user-by-blog-Id
      operationId: deletePropertyReferenceId-blog-delete_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
  /codes:
    get:
      tags:
      - code-entity-controller
      description: get-code
      operationId: getCollectionResource-code-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelCode'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelCode'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - code-entity-controller
      description: create-code
      operationId: postCollectionResource-code-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelCode'
  /codes/{id}:
    get:
      tags:
      - code-entity-controller
      description: get-code
      operationId: getItemResource-code-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelCode'
        "404":
          description: Not Found
    put:
      tags:
      - code-entity-controller
      description: update-code
      operationId: putItemResource-code-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelCode'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelCode'
        "204":
          description: No Content
    delete:
      tags:
      - code-entity-controller
      description: delete-code
      operationId: deleteItemResource-code-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - code-entity-controller
      description: patch-code
      operationId: patchItemResource-code-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelCode'
        "204":
          description: No Content
  /details:
    get:
      tags:
      - detail-entity-controller
      description: get-detail
      operationId: getCollectionResource-detail-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelDetail'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelDetail'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - detail-entity-controller
      description: create-detail
      operationId: postCollectionResource-detail-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelDetail'
  /details/{id}:
    get:
      tags:
      - detail-entity-controller
      description: get-detail
      operationId: getItemResource-detail-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelDetail'
        "404":
          description: Not Found
    put:
      tags:
      - detail-entity-controller
      description: update-detail
      operationId: putItemResource-detail-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelDetail'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelDetail'
        "204":
          description: No Content
    delete:
      tags:
      - detail-entity-controller
      description: delete-detail
      operationId: deleteItemResource-detail-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - detail-entity-controller
      description: patch-detail
      operationId: patchItemResource-detail-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelDetail'
        "204":
          description: No Content
  /phones:
    get:
      tags:
      - phone-entity-controller
      description: get-phone
      operationId: getCollectionResource-phone-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelPhone'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelPhone'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - phone-entity-controller
      description: create-phone
      operationId: postCollectionResource-phone-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPhone'
  /phones/{id}:
    get:
      tags:
      - phone-entity-controller
      description: get-phone
      operationId: getItemResource-phone-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPhone'
        "404":
          description: Not Found
    put:
      tags:
      - phone-entity-controller
      description: update-phone
      operationId: putItemResource-phone-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPhone'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPhone'
        "204":
          description: No Content
    delete:
      tags:
      - phone-entity-controller
      description: delete-phone
      operationId: deleteItemResource-phone-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - phone-entity-controller
      description: patch-phone
      operationId: patchItemResource-phone-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPhone'
        "204":
          description: No Content
  /profile:
    get:
      tags:
      - profile-controller
      operationId: listAllFormsOfMetadata_1
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/RepresentationModelObject'
  /profile/articles:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/blogs:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_2
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/codes:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_3
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/details:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_4
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/phones:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_5
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/projects:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_6
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/tags:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_7
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/users:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_8
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /projects:
    get:
      tags:
      - project-entity-controller
      description: get-project
      operationId: getCollectionResource-project-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelProject'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelProject'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - project-entity-controller
      description: create-project
      operationId: postCollectionResource-project-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelProject'
  /projects/{id}:
    get:
      tags:
      - project-entity-controller
      description: get-project
      operationId: getItemResource-project-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelProject'
        "404":
          description: Not Found
    put:
      tags:
      - project-entity-controller
      description: update-project
      operationId: putItemResource-project-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelProject'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelProject'
        "204":
          description: No Content
    delete:
      tags:
      - project-entity-controller
      description: delete-project
      operationId: deleteItemResource-project-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - project-entity-controller
      description: patch-project
      operationId: patchItemResource-project-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelProject'
        "204":
          description: No Content
  /projects/{id}/codes:
    get:
      tags:
      - project-property-reference-controller
      description: get-code-by-project-Id
      operationId: followPropertyReference-project-get_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelCode'
            text/uri-list:
              schema:
                type: string
        "404":
          description: Not Found
    put:
      tags:
      - project-property-reference-controller
      description: update-code-by-project-Id
      operationId: createPropertyReference-project-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelCode'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelCode'
        "204":
          description: No Content
    delete:
      tags:
      - project-property-reference-controller
      description: delete-code-by-project-Id
      operationId: deletePropertyReference-project-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - project-property-reference-controller
      description: patch-code-by-project-Id
      operationId: createPropertyReference-project-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelCode'
        "204":
          description: No Content
  /projects/{id}/codes/{propertyId}:
    get:
      tags:
      - project-property-reference-controller
      description: get-code-by-project-Id
      operationId: followPropertyReference-project-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelCode'
        "404":
          description: Not Found
    delete:
      tags:
      - project-property-reference-controller
      description: delete-code-by-project-Id
      operationId: deletePropertyReferenceId-project-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
  /projects/{id}/details:
    get:
      tags:
      - project-property-reference-controller
      description: get-detail-by-project-Id
      operationId: followPropertyReference-project-get_2_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelDetail'
            text/uri-list:
              schema:
                type: string
        "404":
          description: Not Found
    put:
      tags:
      - project-property-reference-controller
      description: update-detail-by-project-Id
      operationId: createPropertyReference-project-put_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelDetail'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelDetail'
        "204":
          description: No Content
    delete:
      tags:
      - project-property-reference-controller
      description: delete-detail-by-project-Id
      operationId: deletePropertyReference-project-delete_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - project-property-reference-controller
      description: patch-detail-by-project-Id
      operationId: createPropertyReference-project-patch_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelDetail'
        "204":
          description: No Content
  /projects/{id}/details/{propertyId}:
    get:
      tags:
      - project-property-reference-controller
      description: get-detail-by-project-Id
      operationId: followPropertyReference-project-get_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelDetail'
        "404":
          description: Not Found
    delete:
      tags:
      - project-property-reference-controller
      description: delete-detail-by-project-Id
      operationId: deletePropertyReferenceId-project-delete_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
  /projects/{id}/users:
    get:
      tags:
      - project-property-reference-controller
      description: get-user-by-project-Id
      operationId: followPropertyReference-project-get_3_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
            text/uri-list:
              schema:
                type: string
        "404":
          description: Not Found
    put:
      tags:
      - project-property-reference-controller
      description: update-user-by-project-Id
      operationId: createPropertyReference-project-put_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
        "204":
          description: No Content
    delete:
      tags:
      - project-property-reference-controller
      description: delete-user-by-project-Id
      operationId: deletePropertyReference-project-delete_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - project-property-reference-controller
      description: patch-user-by-project-Id
      operationId: createPropertyReference-project-patch_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
        "204":
          description: No Content
  /projects/{id}/users/{propertyId}:
    get:
      tags:
      - project-property-reference-controller
      description: get-user-by-project-Id
      operationId: followPropertyReference-project-get_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
        "404":
          description: Not Found
    delete:
      tags:
      - project-property-reference-controller
      description: delete-user-by-project-Id
      operationId: deletePropertyReferenceId-project-delete_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
  /tags:
    get:
      tags:
      - tag-entity-controller
      description: get-tag
      operationId: getCollectionResource-tag-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelTag'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelTag'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - tag-entity-controller
      description: create-tag
      operationId: postCollectionResource-tag-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelTag'
  /tags/{id}:
    get:
      tags:
      - tag-entity-controller
      description: get-tag
      operationId: getItemResource-tag-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelTag'
        "404":
          description: Not Found
    put:
      tags:
      - tag-entity-controller
      description: update-tag
      operationId: putItemResource-tag-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelTag'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelTag'
        "204":
          description: No Content
    delete:
      tags:
      - tag-entity-controller
      description: delete-tag
      operationId: deleteItemResource-tag-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - tag-entity-controller
      description: patch-tag
      operationId: patchItemResource-tag-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelTag'
        "204":
          description: No Content
  /users:
    get:
      tags:
      - user-entity-controller
      description: get-user
      operationId: getCollectionResource-user-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelUser'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelUser'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - user-entity-controller
      description: create-user
      operationId: postCollectionResource-user-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelUser'
  /users/{id}:
    get:
      tags:
      - user-entity-controller
      description: get-user
      operationId: getItemResource-user-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelUser'
        "404":
          description: Not Found
    put:
      tags:
      - user-entity-controller
      description: update-user
      operationId: putItemResource-user-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelUser'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelUser'
        "204":
          description: No Content
    delete:
      tags:
      - user-entity-controller
      description: delete-user
      operationId: deleteItemResource-user-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - user-entity-controller
      description: patch-user
      operationId: patchItemResource-user-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelUser'
        "204":
          description: No Content
  /users/{id}/phone:
    get:
      tags:
      - user-property-reference-controller
      description: get-phone-by-user-Id
      operationId: followPropertyReference-user-get_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPhone'
            text/uri-list:
              schema:
                type: string
        "404":
          description: Not Found
    put:
      tags:
      - user-property-reference-controller
      description: update-phone-by-user-Id
      operationId: createPropertyReference-user-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPhone'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPhone'
        "204":
          description: No Content
    delete:
      tags:
      - user-property-reference-controller
      description: delete-phone-by-user-Id
      operationId: deletePropertyReference-user-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - user-property-reference-controller
      description: patch-phone-by-user-Id
      operationId: createPropertyReference-user-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPhone'
        "204":
          description: No Content
  /users/{id}/phone/{propertyId}:
    get:
      tags:
      - user-property-reference-controller
      description: get-phone-by-user-Id
      operationId: followPropertyReference-user-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPhone'
        "404":
          description: Not Found
    delete:
      tags:
      - user-property-reference-controller
      description: delete-phone-by-user-Id
      operationId: deletePropertyReferenceId-user-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
  /api/v1/users/{id}:
    get:
      tags:
      - user-controller
      operationId: getOne
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    put:
      tags:
      - user-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    delete:
      tags:
      - user-controller
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/tags/{id}:
    get:
      tags:
      - tag-controller
      operationId: getOne_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    put:
      tags:
      - tag-controller
      operationId: update_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    delete:
      tags:
      - tag-controller
      operationId: delete_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/projects/{id}:
    get:
      tags:
      - project-controller
      operationId: getOne_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    put:
      tags:
      - project-controller
      operationId: update_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    delete:
      tags:
      - project-controller
      operationId: delete_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/phones/{id}:
    get:
      tags:
      - phone-controller
      operationId: getOne_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    put:
      tags:
      - phone-controller
      operationId: update_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phone'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    delete:
      tags:
      - phone-controller
      operationId: delete_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/details/{id}:
    get:
      tags:
      - detail-controller
      operationId: getOne_4
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    put:
      tags:
      - detail-controller
      operationId: update_4
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Detail'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    delete:
      tags:
      - detail-controller
      operationId: delete_4
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/codes/{id}:
    get:
      tags:
      - code-controller
      operationId: getOne_5
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    put:
      tags:
      - code-controller
      operationId: update_5
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    delete:
      tags:
      - code-controller
      operationId: delete_5
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/blogs/{id}:
    get:
      tags:
      - blog-controller
      operationId: getOne_6
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    put:
      tags:
      - blog-controller
      operationId: update_6
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    delete:
      tags:
      - blog-controller
      operationId: delete_6
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/articles/{id}:
    get:
      tags:
      - article-controller
      operationId: getOne_7
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    put:
      tags:
      - article-controller
      operationId: update_7
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    delete:
      tags:
      - article-controller
      operationId: delete_7
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/users:
    get:
      tags:
      - user-controller
      operationId: getAll
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    post:
      tags:
      - user-controller
      operationId: save
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/tags:
    get:
      tags:
      - tag-controller
      operationId: getAll_1
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    post:
      tags:
      - tag-controller
      operationId: save_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/projects:
    get:
      tags:
      - project-controller
      operationId: getAll_2
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    post:
      tags:
      - project-controller
      operationId: save_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/phones:
    get:
      tags:
      - phone-controller
      operationId: getAll_3
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    post:
      tags:
      - phone-controller
      operationId: save_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phone'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/details:
    get:
      tags:
      - detail-controller
      operationId: getAll_4
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    post:
      tags:
      - detail-controller
      operationId: save_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Detail'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/codes:
    get:
      tags:
      - code-controller
      operationId: getAll_5
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    post:
      tags:
      - code-controller
      operationId: save_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/blogs:
    get:
      tags:
      - blog-controller
      operationId: getAll_6
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    post:
      tags:
      - blog-controller
      operationId: save_6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /api/v1/articles:
    get:
      tags:
      - article-controller
      operationId: getAll_7
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
    post:
      tags:
      - article-controller
      operationId: save_7
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
components:
  schemas:
    AbstractJsonSchemaPropertyObject:
      type: object
      properties:
        title:
          type: string
        readOnly:
          type: boolean
    Item:
      type: object
      properties:
        type:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AbstractJsonSchemaPropertyObject'
        requiredProperties:
          type: array
          items:
            type: string
    JsonSchema:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AbstractJsonSchemaPropertyObject'
        requiredProperties:
          type: array
          items:
            type: string
        definitions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Item'
        type:
          type: string
        $schema:
          type: string
    Links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Link'
    RepresentationModelObject:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
    Code:
      type: object
      properties:
        id:
          type: integer
          format: int64
        packag:
          type: string
        file:
          type: string
    EntityModelCode:
      type: object
      properties:
        packag:
          type: string
        file:
          type: string
        _links:
          $ref: '#/components/schemas/Links'
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
    PagedModelEntityModelCode:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            codes:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelCode'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    EntityModelUser:
      type: object
      properties:
        name:
          type: string
        nick:
          type: string
        _links:
          $ref: '#/components/schemas/Links'
    PagedModelEntityModelUser:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelUser'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    Phone:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
        type:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        nick:
          type: string
        phone:
          $ref: '#/components/schemas/Phone'
    EntityModelPhone:
      type: object
      properties:
        value:
          type: string
        type:
          type: string
        _links:
          $ref: '#/components/schemas/Links'
    CollectionModelObject:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            objects:
              type: array
              items:
                type: object
        _links:
          $ref: '#/components/schemas/Links'
    Detail:
      type: object
      properties:
        id:
          type: integer
          format: int64
        date:
          type: string
        content:
          type: string
        type:
          type: string
        budget:
          type: integer
          format: int32
    EntityModelDetail:
      type: object
      properties:
        date:
          type: string
        content:
          type: string
        type:
          type: string
        budget:
          type: integer
          format: int32
        _links:
          $ref: '#/components/schemas/Links'
    PagedModelEntityModelDetail:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            details:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelDetail'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        abstrct:
          type: string
        content:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    Blog:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        date:
          type: string
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    EntityModelBlog:
      type: object
      properties:
        title:
          type: string
        date:
          type: string
        _links:
          $ref: '#/components/schemas/Links'
    PagedModelEntityModelBlog:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            blogs:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelBlog'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        label:
          type: string
        date:
          type: string
    CollectionModelArticle:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            articles:
              type: array
              items:
                $ref: '#/components/schemas/ArticleResponse'
        _links:
          $ref: '#/components/schemas/Links'
    CollectionModelUser:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/UserResponse'
        _links:
          $ref: '#/components/schemas/Links'
    PagedModelEntityModelPhone:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            phones:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelPhone'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    EntityModelProject:
      type: object
      properties:
        description:
          type: string
        language:
          type: string
        open:
          type: boolean
        _links:
          $ref: '#/components/schemas/Links'
    PagedModelEntityModelProject:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            projects:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelProject'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        language:
          type: string
        open:
          type: boolean
        details:
          type: array
          items:
            $ref: '#/components/schemas/Detail'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/Code'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    CollectionModelDetail:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            details:
              type: array
              items:
                $ref: '#/components/schemas/DetailResponse'
        _links:
          $ref: '#/components/schemas/Links'
    CollectionModelCode:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            codes:
              type: array
              items:
                $ref: '#/components/schemas/CodeResponse'
        _links:
          $ref: '#/components/schemas/Links'
    EntityModelTag:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        date:
          type: string
        _links:
          $ref: '#/components/schemas/Links'
    PagedModelEntityModelTag:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            tags:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelTag'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    EntityModelArticle:
      type: object
      properties:
        title:
          type: string
        abstrct:
          type: string
        content:
          type: string
        _links:
          $ref: '#/components/schemas/Links'
    PagedModelEntityModelArticle:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            articles:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelArticle'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    CollectionModelTag:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            tags:
              type: array
              items:
                $ref: '#/components/schemas/TagResponse'
        _links:
          $ref: '#/components/schemas/Links'
    ArticleRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        abstrct:
          type: string
        content:
          type: string
        tags:
          type: array
          items:
            type: string
    TagRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        label:
          type: string
        date:
          type: string
    TagResponse:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        date:
          type: string
    BlogRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        date:
          type: string
        articles:
          type: array
          items:
            type: string
        users:
          type: array
          items:
            type: string
    PhoneRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
        type:
          type: string
    UserRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        nick:
          type: string
        phone:
          type: string
    ArticleResponse:
      type: object
      properties:
        title:
          type: string
        abstrct:
          type: string
        content:
          type: string
    UserResponse:
      type: object
      properties:
        name:
          type: string
        nick:
          type: string
    CodeRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        packag:
          type: string
        file:
          type: string
    DetailRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        date:
          type: string
        content:
          type: string
        type:
          type: string
        budget:
          type: integer
          format: int32
    ProjectRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        language:
          type: string
        open:
          type: boolean
        details:
          type: array
          items:
            type: string
        codes:
          type: array
          items:
            type: string
        users:
          type: array
          items:
            type: string
    CodeResponse:
      type: object
      properties:
        packag:
          type: string
        file:
          type: string
    DetailResponse:
      type: object
      properties:
        date:
          type: string
        content:
          type: string
        type:
          type: string
        budget:
          type: integer
          format: int32
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
